'''
1.Реализовать класс «Дата», функция-конструктор которого должна принимать дату в виде строки формата «день-месяц-год».
В рамках класса реализовать два метода. Первый, с декоратором @classmethod, должен извлекать число, месяц, год и преобразовывать их тип к типу «Число».
Второй, с декоратором @staticmethod, должен проводить валидацию числа, месяца и года (например, месяц — от 1 до 12).
Проверить работу полученной структуры на реальных данных.
'''

class Date:

    def __init__(self, day, month, year):
        self.date = "18-09-1993"
        self.day = day
        self.month = month
        self.year = year

    @classmethod
    def numbers(cls, date):
        day, month, year = map(int, date.split('-'))
        my_date = cls(day, month, year)
        return my_date

    @staticmethod
    def valid(date):
        day, month, year = map(int, date.split('-'))
        return day <= 31 and month <= 12 and year <= 3000

us_date = "11-02-2020"

print(Date.numbers(us_date))
print(Date.valid(us_date))


'''
2. Создайте собственный класс-исключение, обрабатывающий ситуацию деления на нуль.
Проверьте его работу на данных, вводимых пользователем. При вводе пользователем нуля в качестве делителя программа должна корректно
обработать эту ситуацию и не завершиться с ошибкой.
'''


class Zerro(Exception):
    def __init__(self, txt):
        self.txt = txt


inp_f = input("Введите делимое: ")

try:
    inp_f = int(inp_f)
except ValueError:
    print("Вы ввели не число, начните сначала")
    raise SystemExit

inp_s = input("Введите делитель: ")

try:
    inp_s = int(inp_s)
    if inp_s == 0 and inp_f == 0:
        raise Zerro("Если ноль разделить на любое число получится ноль")
    elif inp_s == 0:
        raise Zerro("Деление на ноль не допустимо")
except ValueError:
    print("Вы ввели не число")
except Zerro as err:
    print(err)
else:
    print("Ваш результат: ", inp_f / inp_s)
    
    
    
 '''
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список только числами.
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
При этом скрипт завершается, сформированный список с числами выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем очередного элемента
необходимо реализовать проверку типа элемента и вносить его в список, только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.
'''


class Err(Exception):
    def __init__(self):
        self.user_list = []

    def funk(self):
        while True:
            try:
                num = input("Введите число. Для завершения списка введите 'stop'")
                num = int(num)
                self.user_list.append(num)
                print(self.user_list)
                if num == 000:
                    print(f"Итоговый список: {self.user_list}")
                    break
            except ValueError:
                print("Неверное значение")

user = Err()
user.funk()


'''
4. Начните работу над проектом «Склад оргтехники». Создайте класс, описывающий склад. А также класс «Оргтехника», который будет базовым для классов-наследников.
Эти классы — конкретные типы оргтехники (принтер, сканер, ксерокс). В базовом классе определить параметры, общие для приведенных типов.
В классах-наследниках реализовать параметры, уникальные для каждого типа оргтехники.

5. Продолжить работу над первым заданием. Разработать методы, отвечающие за приём оргтехники на склад и передачу в определенное подразделение компании.
Для хранения данных о наименовании и количестве единиц оргтехники, а также других данных, можно использовать любую подходящую структуру, например словарь.

6. Продолжить работу над вторым заданием. Реализуйте механизм валидации вводимых пользователем данных. Например, для указания количества принтеров,
отправленных на склад, нельзя использовать строковый тип данных.
'''


class StoreMashines:
    def __init__(self, name, price, quantity, number_of_lists, *args):
        self.name = name
        self.price = price
        self.quantity = quantity
        self.numb = number_of_lists
        self.my_store_full = []
        self.my_store = []
        self.my_unit = {'Модель устройства': self.name, 'Цена за ед': self.price, 'Количество': self.quantity}

    def __str__(self):
        return f'{self.name} цена {self.price} количество {self.quantity}'

    def reception(self):
        try:
            unit = input(f'Введите наименование ')
            unit_p = int(input(f'Введите цену за ед '))
            unit_q = int(input(f'Введите количество '))
            unique = {'Модель устройства': unit, 'Цена за ед': unit_p, 'Количество': unit_q}
            self.my_unit.update(unique)
            self.my_store.append(self.my_unit)
            print(f'Текущий список -\n {self.my_store}')
        except:
            return f'Ошибка ввода данных'

        print(f'Для выхода - Q, продолжение - Enter')
        q = input(f'---> ')
        if q == 'Q' or q == 'q':
            self.my_store_full.append(self.my_store)
            print(f'Весь склад -\n {self.my_store_full}')
            return f'Выход'
        else:
            return StoreMashines.reception(self)


class Printer(StoreMashines):
    def to_print(self):
        return f'to print smth {self.numb} times'

class Scanner(StoreMashines):
    def to_scan(self):
        return f'to scan smth {self.numb} times'

class Copier(StoreMashines):
    def to_copier(self):
        return f'to copier smth  {self.numb} times'

unit_1 = Printer('hp', 2000, 5, 10)
unit_2 = Scanner('Canon', 1200, 5, 10)
unit_3 = Copier('Xerox', 1500, 1, 15)
print(unit_1.reception())
print(unit_2.reception())
print(unit_3.reception())
print(unit_1.to_print())
print(unit_3.to_copier())



'''
7. . Реализовать проект «Операции с комплексными числами». Создайте класс «Комплексное число», реализуйте перегрузку методов
сложения и умножения комплексных чисел. Проверьте работу проекта, создав экземпляры класса (комплексные числа) и выполнив сложение и умножение
созданных экземпляров. Проверьте корректность полученного результата.

Комплексное число — это выражение вида a + bi, где a, b — действительные числа, а i — так называемая мнимая единица, символ, квадрат которого равен –1,
то есть i2 = –1. Число a называется действительной частью, а число b — мнимой частью комплексного числа z = a + bi. Если b = 0, то вместо a + 0i пишут просто a.
Видно, что действительные числа — это частный случай комплексных чисел.

Арифметические действия над комплексными числами те же, что и над действительными: их можно складывать, вычитать, умножать и делить друг на друга.
Сложение и вычитание происходят по правилу (a + bi) ± (c + di) = (a ± c) + (b ± d)i, а умножение — по правилу (a + bi) · (c + di) = (ac – bd) + (ad + bc)i
(здесь как раз используется, что i2 = –1)
'''

class ComplexNumber:
    def __init__(self, a, b):
        self.a = a
        self.b = b
        self.i: int = -1

    def __add__(self, other):
        return f'c = ({self.a + other.a} + {self.b + other.b}) * {self.i}'

    def __mul__(self, other):
        return f'c = ({self.a * other.a - (self.b * other.b)} + {self.b * other.a}) * {self.i}'

    def __str__(self):
        return f'c = ({self.a} + {self.b}) * {self.i}'


z_1 = ComplexNumber(5, 7)
z_2 = ComplexNumber(3, 12)

print(z_1 + z_2)
print(z_1 * z_2)
